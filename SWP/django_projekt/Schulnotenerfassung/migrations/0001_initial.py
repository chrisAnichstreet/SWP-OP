# Generated by Django 2.1.7 on 2019-04-16 10:23

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Faecher',
            fields=[
                ('f_id', models.AutoField(primary_key=True, serialize=False)),
                ('fach_name', models.CharField(max_length=200, unique=True, verbose_name='Fach Bezeichnung')),
            ],
            options={
                'verbose_name': 'Fach',
                'verbose_name_plural': 'Faecher',
            },
        ),
        migrations.CreateModel(
            name='Klasse',
            fields=[
                ('k_id', models.AutoField(primary_key=True, serialize=False)),
                ('jahrgang', models.IntegerField(verbose_name='Jahrgang')),
                ('name', models.CharField(max_length=200, verbose_name='Klassen Bezeichnung')),
            ],
            options={
                'verbose_name': 'Klasse',
                'verbose_name_plural': 'Klasse',
            },
        ),
        migrations.CreateModel(
            name='Lehrer',
            fields=[
                ('l_id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'verbose_name': 'Lehrer',
                'verbose_name_plural': 'Lehrer',
            },
        ),
        migrations.CreateModel(
            name='Noten',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note', models.IntegerField(default=0)),
            ],
            options={
                'verbose_name': 'Note',
                'verbose_name_plural': 'Noten',
            },
        ),
        migrations.CreateModel(
            name='Schueler',
            fields=[
                ('s_id', models.AutoField(primary_key=True, serialize=False)),
                ('k_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='Schulnotenerfassung.Klasse', verbose_name='Klasse')),
            ],
            options={
                'verbose_name': 'Schueler',
                'verbose_name_plural': 'Schueler',
            },
        ),
        migrations.CreateModel(
            name='Unterrichts_Fach',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('f_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Schulnotenerfassung.Faecher', verbose_name='Fach')),
                ('k_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Schulnotenerfassung.Klasse', verbose_name='Klasse')),
                ('l_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Schulnotenerfassung.Lehrer', verbose_name='Lehrer')),
            ],
            options={
                'verbose_name': 'Unterrichts Fach',
                'verbose_name_plural': 'Unterrichts Faecher',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Schueler2',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            bases=('Schulnotenerfassung.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AddField(
            model_name='schueler',
            name='user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='noten',
            name='s_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Schulnotenerfassung.Schueler', verbose_name='Schueler'),
        ),
        migrations.AddField(
            model_name='noten',
            name='u_id',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='Schulnotenerfassung.Unterrichts_Fach', verbose_name='Unterrichts Fach'),
        ),
        migrations.AddField(
            model_name='lehrer',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='klasse',
            unique_together={('jahrgang', 'name')},
        ),
        migrations.AlterUniqueTogether(
            name='unterrichts_fach',
            unique_together={('f_id', 'l_id', 'k_id')},
        ),
        migrations.AddField(
            model_name='schueler2',
            name='k_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='Schulnotenerfassung.Klasse', verbose_name='Klasse'),
        ),
        migrations.AlterUniqueTogether(
            name='noten',
            unique_together={('s_id', 'u_id')},
        ),
    ]
